/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  spender: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type OnWithdrawBTC = ContractEventLog<{
  amount: string;
  recipient: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;

export interface PICNIC extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PICNIC;
  clone(): PICNIC;
  methods: {
    AddressResetBuyLock(): NonPayableTransactionObject<void>;

    AddressResetSellLock(): NonPayableTransactionObject<void>;

    BalanceLimitDivider(): NonPayableTransactionObject<string>;

    CAKEWithdraw(): NonPayableTransactionObject<void>;

    InitialSupply(): NonPayableTransactionObject<string>;

    MaxBuyLockTime(): NonPayableTransactionObject<string>;

    MaxSellLockTime(): NonPayableTransactionObject<string>;

    SellLimitDivider(): NonPayableTransactionObject<string>;

    SetupEnableTrading(): NonPayableTransactionObject<void>;

    SetupLiquidityTokenAddress(
      liquidityTokenAddress: string
    ): NonPayableTransactionObject<void>;

    TeamChangeAntiWhale(
      newAntiWhale: number | string | BN
    ): NonPayableTransactionObject<void>;

    TeamChangeMarketingShare(
      newShare: number | string | BN
    ): NonPayableTransactionObject<void>;

    TeamChangeTeamWallet(
      newTeamWallet: string
    ): NonPayableTransactionObject<void>;

    TeamChangeWalletTwo(
      newWalletTwo: string
    ): NonPayableTransactionObject<void>;

    TeamCreateLPandBNB(): NonPayableTransactionObject<void>;

    TeamDisableBuyLock(disabled: boolean): NonPayableTransactionObject<void>;

    TeamDisableSellLock(disabled: boolean): NonPayableTransactionObject<void>;

    TeamReleaseLiquidity(): NonPayableTransactionObject<void>;

    TeamRemoveLiquidity(
      addToStaking: boolean
    ): NonPayableTransactionObject<void>;

    TeamRemoveRemainingBNB(): NonPayableTransactionObject<void>;

    TeamSetBuyLockTime(
      buyLockSeconds: number | string | BN
    ): NonPayableTransactionObject<void>;

    TeamSetSellLockTime(
      sellLockSeconds: number | string | BN
    ): NonPayableTransactionObject<void>;

    TeamSetTaxes(
      burnTaxes: number | string | BN,
      liquidityTaxes: number | string | BN,
      stakingTaxes: number | string | BN,
      buyTax: number | string | BN,
      sellTax: number | string | BN,
      transferTax: number | string | BN
    ): NonPayableTransactionObject<void>;

    TeamSwitchManualBNBConversion(
      manual: boolean
    ): NonPayableTransactionObject<void>;

    TeamUnlockLiquidityInSeconds(
      secondsUntilUnlock: number | string | BN
    ): NonPayableTransactionObject<void>;

    TeamUpdateLimits(
      newBalanceLimit: number | string | BN,
      newSellLimit: number | string | BN
    ): NonPayableTransactionObject<void>;

    TeamWallet(): NonPayableTransactionObject<string>;

    TeamWithdrawALLMarketingBNB(): NonPayableTransactionObject<void>;

    TeamWithdrawXMarketingBNB(
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    _getTotalShares(): NonPayableTransactionObject<string>;

    allowance(
      _owner: string,
      spender: string
    ): NonPayableTransactionObject<string>;

    approve(
      spender: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    balanceLimit(): NonPayableTransactionObject<string>;

    balanceOf(account: string): NonPayableTransactionObject<string>;

    buyLockDisabled(): NonPayableTransactionObject<boolean>;

    buyLockTime(): NonPayableTransactionObject<string>;

    decimals(): NonPayableTransactionObject<string>;

    decreaseAllowance(
      spender: string,
      subtractedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    getAddressBuyLockTimeInSeconds(
      AddressToCheck: string
    ): NonPayableTransactionObject<string>;

    getAddressSellLockTimeInSeconds(
      AddressToCheck: string
    ): NonPayableTransactionObject<string>;

    getBurnedTokens(): NonPayableTransactionObject<string>;

    getBuyLockTimeInSeconds(): NonPayableTransactionObject<string>;

    getDividents(addr: string): NonPayableTransactionObject<string>;

    getLimits(): NonPayableTransactionObject<{
      balance: string;
      sell: string;
      0: string;
      1: string;
    }>;

    getLiquidityReleaseTimeInSeconds(): NonPayableTransactionObject<string>;

    getOwner(): NonPayableTransactionObject<string>;

    getSellLockTimeInSeconds(): NonPayableTransactionObject<string>;

    getTaxes(): NonPayableTransactionObject<{
      burnTax: string;
      liquidityTax: string;
      marketingTax: string;
      buyTax: string;
      sellTax: string;
      transferTax: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    isExcludedFromStaking(addr: string): NonPayableTransactionObject<boolean>;

    manualConversion(): NonPayableTransactionObject<boolean>;

    marketingBalance(): NonPayableTransactionObject<string>;

    marketingShare(): NonPayableTransactionObject<string>;

    name(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    profitPerShare(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    sellLimit(): NonPayableTransactionObject<string>;

    sellLockDisabled(): NonPayableTransactionObject<boolean>;

    sellLockTime(): NonPayableTransactionObject<string>;

    symbol(): NonPayableTransactionObject<string>;

    totalLPBNB(): NonPayableTransactionObject<string>;

    totalPayouts(): NonPayableTransactionObject<string>;

    totalStakingReward(): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    tradingEnabled(): NonPayableTransactionObject<boolean>;

    transfer(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    walletTwo(): NonPayableTransactionObject<string>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    OnWithdrawBTC(cb?: Callback<OnWithdrawBTC>): EventEmitter;
    OnWithdrawBTC(
      options?: EventOptions,
      cb?: Callback<OnWithdrawBTC>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "OnWithdrawBTC", cb: Callback<OnWithdrawBTC>): void;
  once(
    event: "OnWithdrawBTC",
    options: EventOptions,
    cb: Callback<OnWithdrawBTC>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}
