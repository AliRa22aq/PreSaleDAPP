/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Bought = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type Sold = ContractEventLog<{
  amount: string;
  0: string;
}>;

export interface DEX extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DEX;
  clone(): DEX;
  methods: {
    token(): NonPayableTransactionObject<string>;

    buy(): PayableTransactionObject<void>;

    sell(amount: number | string | BN): NonPayableTransactionObject<void>;
  };
  events: {
    Bought(cb?: Callback<Bought>): EventEmitter;
    Bought(options?: EventOptions, cb?: Callback<Bought>): EventEmitter;

    Sold(cb?: Callback<Sold>): EventEmitter;
    Sold(options?: EventOptions, cb?: Callback<Sold>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Bought", cb: Callback<Bought>): void;
  once(event: "Bought", options: EventOptions, cb: Callback<Bought>): void;

  once(event: "Sold", cb: Callback<Sold>): void;
  once(event: "Sold", options: EventOptions, cb: Callback<Sold>): void;
}
