/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface Presale extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Presale;
  clone(): Presale;
  methods: {
    WBNBAddr(): NonPayableTransactionObject<string>;

    count(): NonPayableTransactionObject<string>;

    devAddr(): NonPayableTransactionObject<string>;

    internalData(arg0: number | string | BN): NonPayableTransactionObject<{
      totalTokensSold: string;
      revenueFromPresale: string;
      tokensAddedToLiquidity: string;
      extraTokens: string;
      poolShareBNB: string;
      devTeamShareBNB: string;
      ownersShareBNB: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
    }>;

    isUserWhitelistedToStartProject(
      arg0: string
    ): NonPayableTransactionObject<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    pancakeSwapFactoryAddr(): NonPayableTransactionObject<string>;

    pancakeSwapRouterAddr(): NonPayableTransactionObject<string>;

    participant(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<{
      value: string;
      tokens: string;
      whiteListed: boolean;
      0: string;
      1: string;
      2: boolean;
    }>;

    presaleInfo(arg0: number | string | BN): NonPayableTransactionObject<{
      typeOfPresale: string;
      preSaleContractAddr: string;
      presaleOwnerAddr: string;
      priceOfEachToken: string;
      tokensForSale: string;
      reservedTokensPCForLP: string;
      remainingTokensForSale: string;
      accumulatedBalance: string;
      pairAddress: string;
      preSaleStatus: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    presaleParticipationCriteria(
      arg0: number | string | BN
    ): NonPayableTransactionObject<{
      preSaleContractAddr: string;
      criteriaTokenAddr: string;
      minTokensForParticipation: string;
      reqestedTokens: [string, string];
      softCap: string;
      presaleTimes: [string, string];
      0: string;
      1: string;
      2: string;
      3: [string, string];
      4: string;
      5: [string, string];
    }>;

    presalectCounts(arg0: number | string | BN): NonPayableTransactionObject<{
      participantsCount: string;
      claimsCount: string;
      0: string;
      1: string;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    salesFeeInPercent(): NonPayableTransactionObject<string>;

    salesFeeInPercentForAProject(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    teamAddr(): NonPayableTransactionObject<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    upfrontfee(): NonPayableTransactionObject<string>;

    setFactoryAddr(_address: string): NonPayableTransactionObject<void>;

    setRouterAddr(_address: string): NonPayableTransactionObject<void>;

    whiteListUsersToStartProject(
      _address: string
    ): NonPayableTransactionObject<void>;

    whiteListUsersToBuyTokens(
      _id: number | string | BN,
      _address: string
    ): NonPayableTransactionObject<void>;

    updateFees(
      _upfrontFee: number | string | BN,
      _salesFeeInPercent: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateSalesFeeInPercentForAProject(
      _id: number | string | BN,
      _fee: number | string | BN
    ): NonPayableTransactionObject<void>;

    setPresale(
      _presaleType: number | string | BN,
      _preSaleContractAddress: string,
      _criteriaTokenAddr: string,
      _reservedTokensPCForLP: number | string | BN,
      _tokensForSale: number | string | BN,
      _priceOfEachToken: number | string | BN,
      _minTokensForParticipation: number | string | BN,
      _presaleTimes: [number | string | BN, number | string | BN],
      _reqestedTokens: [number | string | BN, number | string | BN],
      _softCap: number | string | BN
    ): PayableTransactionObject<string>;

    deletePresaleContractInfo(
      _id: number | string | BN
    ): NonPayableTransactionObject<void>;

    buyTokensOnPresale(
      _id: number | string | BN,
      _numOfTokensRequested: number | string | BN
    ): PayableTransactionObject<void>;

    claimTokensOrARefund(
      _id: number | string | BN
    ): NonPayableTransactionObject<void>;

    endPresale(_id: number | string | BN): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
    }>;

    burnOrWithdrawTokens(
      _id: number | string | BN,
      _withdrawtype: number | string | BN
    ): NonPayableTransactionObject<void>;

    BNBbalanceOfContract(): NonPayableTransactionObject<string>;

    updatePresaleTime(
      _id: number | string | BN,
      _starttime: number | string | BN,
      _endTime: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateParticipationCriteria(
      _id: number | string | BN,
      _priceOfEachToken: number | string | BN,
      _minTokensReq: number | string | BN,
      _maxTokensReq: number | string | BN,
      _softCap: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateteamAddr(_teamAddr: string): NonPayableTransactionObject<void>;

    preSaleTokenBalanceOfContract(
      _id: number | string | BN
    ): NonPayableTransactionObject<string>;

    preSaleTokenBalanceOfUser(
      _id: number | string | BN
    ): NonPayableTransactionObject<string>;

    criteriaTokenBalanceOfUser(
      _id: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
